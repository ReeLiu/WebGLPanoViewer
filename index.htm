<!DOCTYPE html>

<html lang="zh-cn">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta name="author" content="Script Tutorials">   
    <meta name="viewport" content="target-densitydpi=device-dpi, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0,user-scalable=no">
	<title>Shanghai Museum</title>
    <link type="text/css" href="./css/map.css" rel="stylesheet"/>
    <link type="text/css" href="./css/popup_simple.css" rel="stylesheet"/>
    <link type="text/css" href="./css/formstyles_dialogWin.css" rel="stylesheet"/>
    <link type="text/css" href="./css/assetstyle_icons.css" rel="stylesheet"/>
	<!-- /skybox shaders -->  
    <script type="application/x-glsl" id="sky-vertex">
        varying vec2 vUV;
        void main() {
          vUV = uv;
          vec4 pos = vec4(position, 1.0);
          gl_Position = projectionMatrix * modelViewMatrix * pos;
        }
    </script>

    <script type="application/x-glsl" id="sky-fragment">

        varying vec2 vUV;
        uniform float d_focal;
        uniform float R_kernel;
        uniform int h_img;
        uniform int w_img;
        uniform int refocus;

        uniform sampler2D tex_img;
        uniform sampler2D tex_disp;
        uniform sampler2D tex_kernel;
        uniform sampler2D tex_fusing_weight;

        void main() {

        if (refocus == 1){
        const float MAX_D = 70.0;
        const float eps = 1e-5;
        float w = float(w_img);
        float h = float(h_img);
        float R = R_kernel;
        float d_f = d_focal;

        vec4 c_p = texture2D( tex_img, vUV);
        vec4 d_p = texture2D( tex_disp, vUV);

        vec3 rst_p = vec3(0.0,0.0,0.0);
        vec3 w_total = vec3(eps, eps, eps);
        float weight; //ray sample weight
        float c_max;
        vec4 c_weight;

        vec2 q;//ray sample at point q
        vec4 c_q;
        vec4 d_q;
        vec2 r;//position in the kernel mask
        vec2 l;//position in the image kernel at each disp
        vec4 w_r;

        vec2 q_nxt;
        vec4 c_q_nxt;
        vec4 d_q_nxt;
        vec2 l_pq;

        /**/
        //for( float y=-R_kernel; y<=R_kernel; y++ )
        //Loop index cannot be initialized with non-constant expression

        //Loop over the aperture kernel
        for( float y=0.0; y<=MAX_D; y++ )
        {
        if( y >= 2.0*R_kernel)
        break;
        r.y = (y - R_kernel) / h;
        for( float x = 0.0; x <= MAX_D; x++)
        {
        if( y>= 2.0*R_kernel)	break;
        r.x = (x-R_kernel)/w;

        w_r = texture2D(tex_kernel, vec2(x/(1.0+2.0*R),y/(1.0+2.0*R)));
        if( abs( w_r.r ) < eps)
        {
        continue;
        }

        //q = p+r;
        q = vUV+max(d_f,1.0-d_f)*r;
        if(q.x < 0.0 || q.x >= 1.0 || q.y < 0.0 || q.y >= 1.0)//Outside image bound
        {
        continue;
        }

        d_q = texture2D( tex_disp, q);
        if( d_p.r >= d_q.r )//guarantee consistent blurness of the front object in rendering
        {
        d_q = d_p;
        }

        l_pq = (abs(d_f - d_q.r))*r;
        q_nxt = vUV+l_pq;
        c_q_nxt = texture2D( tex_img, q_nxt);

        c_max = max(c_q_nxt.r, max(c_q_nxt.g, c_q_nxt.b));

        weight = texture2D(tex_fusing_weight, vec2(c_max, 0)).r;
        //weight = 1.0;
        w_total.r += weight;
        rst_p.r += weight*c_q_nxt.r;

        //weight = fusing_weight[1];
        w_total.g += weight;
        rst_p.g += weight*c_q_nxt.g;

        //weight = 1.0;
        w_total.b += weight;
        rst_p.b += weight*c_q_nxt.b;
        /**/
        }
        }/**/

        vec4 color_out;
        color_out.r = rst_p.r/w_total.r;
        color_out.g = rst_p.g/w_total.g;
        color_out.b = rst_p.b/w_total.b;
        //vec4 color_out = texture2D( tex_img, vUV )* texture2D( tex_disp, vUV );
        color_out.a = 1.0;

        if( color_out.r > 1.0 )
        {
        color_out.r = 1.0;
        }
        else if( color_out.r < 0.0 )
        {
        color_out.r = 0.0;
        }
        if( color_out.g > 1.0 )
        {
        color_out.g = 1.0;
        }
        else if( color_out.g < 0.0 )
        {
        color_out.g = 0.0;
        }
        if( color_out.b > 1.0 )
        {
        color_out.b = 1.0;
        }
        else if( color_out.b < 0.0 )
        {
        color_out.b = 0.0;
        }

        gl_FragColor = color_out;
        }

        else
        {
            vec4 sample = texture2D(tex_img, vUV);
            gl_FragColor = vec4(sample.xyz, sample.w);
        }
    }

    </script>

        <!-- /skybox shaders -->
    <script src="./js/mootools.v1.00.js" type="text/javascript" language="javascript"></script>
    <script src="./js/three.min.js"></script>
    <script src="./js/OBJLoader.js"></script>
    <script src="./js/THREEx.WindowResize.js"></script>
    <script src="./js/OrbitControls.js"></script>
    <script src="./js/script.js"></script>
    <script src="./js/script_popup.js"></script>
    <script src="./js/iconsJS.js"></script>    
</head>
    
<body style="overflow-x:hidden;overflow-y:hidden;">        
		<div class="mainWindow">
        	<div id="panoramaDiv" style="position:absolute;top:0px;left:0px;z-index:1"></div>          
            <div class="logo" id="imgLogo" style="z-index:3;"></div>
       </div>
</body>

</html>